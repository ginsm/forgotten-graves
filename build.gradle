plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'me.modmuss50.mod-publish-plugin' version '0.8.4'
}

archivesBaseName = project.archives_base_name
version = "${property("mod_version")}+${stonecutter.current.version}" // include game version in the mod filename
group = project.maven_group

repositories {
    mavenCentral()

    // Trinkets
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = "https://maven.ladysnake.org/releases"
    }

    // Cloth Config
    maven {
        url = "https://maven.shedaniel.me/"
    }

    // Inventorio
    maven {
        name = "Modrinth"
        url = uri("https://api.modrinth.com/maven")
        content {
            includeGroup "maven.modrinth"
        }
    }
}

loom {
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
        datagen {
            inherit server
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=forgottengraves"

            runDir "build/datagen"
        }

        // This adds a run config for GameTest API: "gradlew runGametest"
        gametest {
            server()
            vmArg "-Dfabric-api.gametest"

            // timestamped filename, e.g. test_results-2025-08-19_2042.xml
            def timestamp = new Date().format("yyyy-MM-dd_HHmmss")
            def reportFile = "${project.layout.buildDirectory.get()}/test-results/${timestamp}.xml"

            vmArg "-Dfabric-api.gametest.report-file=${reportFile}"
            runDir "build/gametest"
        }
    }
}

sourceSets {
    main.resources {
        srcDirs += [
                'src/main/generated'
        ]
    }
}

dependencies {
    // To change the versions see the gradle.properties file(s)
    minecraft "com.mojang:minecraft:${stonecutter.current.version}" // provide version with stonecutter
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Cloth/Auto Config
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    include "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"

    // Compat Mods
    modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"
    modCompileOnly "maven.modrinth:inventorio:${project.inventorio_version}"

    // Needed for trinkets
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
}

if (stonecutter.current.isActive) { // run configs for non-active version would be invalid
    loom {
        runConfigs.all {
            ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
            runDir "../../run" // use a global run directory for all versions
        }
    }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand project.properties
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Build rules
jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }

    exclude "data/forgottengraves/gametest/**"
}


// ============ Publishing ============
// Check for local.properties file
def localPropsFile = rootProject.file('local.properties')
if (!localPropsFile.exists()) {
    throw new GradleException("local.properties file not found. Please create this file with your API tokens.")
}

// Load properties
def localProps = new Properties().tap {
    localPropsFile.withInputStream { load(it) }
}

// Verify required properties exist
def requiredProps = ['curseforge.token', 'modrinth.token']
def missingProps = requiredProps.findAll { !localProps[it] }

if (!missingProps.empty) {
    throw new GradleException("Missing required properties in local.properties: ${missingProps.join(', ')}")
}

publishMods {
    displayName = "Forgotten Graves ${project.property('mod_version')}+${stonecutter.current.version}"
    changelog = rootProject.file('CHANGELOG.md').text
    file = tasks.remapJar.archiveFile
    modLoaders.add("fabric")
    type = STABLE

    curseforge {
        projectId = "550480"
        accessToken = localProps.getProperty("curseforge.token")
        minecraftVersions.add(stonecutter.current.version)

        requires("fabric-api")
        requires("cloth-config")

        optional("modmenu")
        optional("trinkets")
        optional("backslot")
        optional("inventorio")
    }

    modrinth {
        projectId = "FrZIkosK"
        accessToken = localProps.getProperty("modrinth.token")
        minecraftVersions.add(stonecutter.current.version)

        requires("fabric-api")
        requires("cloth-config")

        optional("modmenu")
        optional("trinkets")
        optional("backslot")
        optional("inventorio")
    }
}